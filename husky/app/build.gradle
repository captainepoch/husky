plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.google.ksp)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
}

android {
    namespace "com.keylesspalace.tusky"

    compileSdkVersion buildVersions.compileSdk
    buildToolsVersion buildVersions.buildTools

    defaultConfig {
        applicationId buildVersions.applicationId

        minSdkVersion buildVersions.minSdk
        targetSdkVersion buildVersions.targetSdk

        versionCode buildVersions.versionCode
        versionName buildVersions.versionName

        testInstrumentationRunner buildVersions.testinstrunner

        buildConfigField("String", "APPLICATION_NAME", "\"$APP_NAME\"")
        buildConfigField("String", "CUSTOM_LOGO_URL", "\"$CUSTOM_LOGO_URL\"")
        buildConfigField("String", "CUSTOM_INSTANCE", "\"$CUSTOM_INSTANCE\"")
        buildConfigField("String", "SUPPORT_ACCOUNT_URL", "\"$SUPPORT_ACCOUNT_URL\"")
    }

    ksp {
        arg("room.schemaLocation", "$projectDir/schemas")
        arg("room.incremental", "true")
    }

    signingConfigs {
        debug {
            storeFile file("${rootDir}/${buildVersions.debugSign.keystoreFile}")
            storePassword buildVersions.debugSign.keystorePassword
            keyAlias buildVersions.debugSign.keyAlias
            keyPassword buildVersions.debugSign.keyPassword
        }
    }

    buildTypes {
        debug {
            debuggable true

            minifyEnabled false
            shrinkResources false

            signingConfig signingConfigs.debug

            getIsDefault().set(true)
        }

        release {
            debuggable false

            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }
    }

    flavorDimensions =
            [buildVersions.flavorDimensions.husky, buildVersions.flavorDimensions.release]
    productFlavors {
        husky {
            dimension buildVersions.flavorDimensions.husky
        }

        dev {
            getIsDefault().set(true)

            dimension buildVersions.flavorDimensions.release

            applicationId buildVersions.dev.applicationId

            minSdkVersion buildVersions.dev.minSdk
            compileSdkVersion buildVersions.dev.compileSdk
            targetSdkVersion buildVersions.dev.targetSdk

            versionCode buildVersions.dev.versionCode
            versionName buildVersions.dev.versionName

            versionNameSuffix = "-${buildVersions.dev.suffix}"
        }

        beta {
            dimension buildVersions.flavorDimensions.release

            versionNameSuffix = "-${buildVersions.beta.suffix}${buildVersions.beta.versionSuffix}"
        }

        stable {
            dimension buildVersions.flavorDimensions.release
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def filename = output.outputFileName.split("\\.")
            if(filename.size() == 2) {
                def extension = filename[1]
                output.outputFileName = "husky_${versionName}.${extension}"
            }
        }
    }

    lintOptions {
        //abortOnError false
        disable "MissingTranslation"
        disable "ExtraTranslation"
        disable "AppCompatCustomView"
        disable "UseRequireInsteadOfGet"
    }

    compileOptions {
        sourceCompatibility = buildVersions.javaCompat
        targetCompatibility = buildVersions.javaCompat
    }

    kotlinOptions {
        jvmTarget = buildVersions.jdkVersion
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    packagingOptions {
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/LICENSE"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/license.txt"
        exclude "META-INF/NOTICE"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/notice.txt"
        exclude "META-INF/ASL2.0"
        exclude "META-INF/*.kotlin_module"
        exclude "LICENSE_OFL"
        exclude "LICENSE_UNICODE"
    }

    bundle {
        language {
            // bundle all languages in every apk so the dynamic language switching works
            enableSplit = false
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])

    // AndroidX dependencies
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.browser)
    implementation(libs.androidx.cardview)
    implementation(libs.androidx.constraintLayout)
    implementation(libs.androidx.coreKtx)
    implementation(libs.androidx.emoji2)
    implementation(libs.androidx.emoji2.views)
    implementation(libs.androidx.emoji2.views.helper)
    implementation(libs.androidx.exifinterface)
    implementation(libs.androidx.fragmentKtx)
    implementation(libs.androidx.lifecycle.commonJava)
    implementation(libs.androidx.lifecycle.livedataKtx)
    implementation(libs.androidx.lifecycle.reactiveStreamsKtx)
    implementation(libs.androidx.lifecycle.runtimeKtx)
    implementation(libs.androidx.lifecycle.viewmodelKtx)
    implementation(libs.androidx.media3.exoplayer)
    implementation(libs.androidx.media3.ui)
    implementation(libs.androidx.paging)
    implementation(libs.androidx.preferenceKtx)
    implementation(libs.androidx.recyclerview)
    ksp(libs.androidx.room.compiler)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.rxjava)
    implementation(libs.androidx.sharetarget)
    implementation(libs.androidx.swiperefreshlayout)
    implementation(libs.androidx.viewpager2)
    implementation(libs.androidx.workKtx)

    // Glide dependencies
    implementation(libs.glide)
    ksp(libs.glide.compiler)
    implementation(libs.glide.image)
    implementation(libs.glide.image.factory)
    implementation(libs.glide.okhttp)
    implementation(libs.glide.plugin.animation)
    implementation(libs.glide.plugin.avif)

    // Koin dependencies
    implementation(libs.koin)
    implementation(libs.koin.android)
    implementation(libs.koin.java)
    implementation(libs.koin.workmanager)

    // Kotlin dependencies
    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlin.stdlib.jdk)

    // KotlinX dependencies
    implementation(libs.kotlinx.coroutines)
    implementation(libs.kotlinx.coroutines.android)

    // RxJava dependencies
    implementation(libs.rx.android)
    implementation(libs.rx.java)
    implementation(libs.rx.kotlin)

    // Square dependencies
    implementation(libs.retrofit)
    implementation(libs.retrofit.rxjava)
    implementation(libs.retrofit.gson)
    implementation(libs.okhttp)
    implementation(libs.okhttp.brotli)
    implementation(libs.okhttp.logginginterceptor)

    // Other dependencies
    implementation(libs.androidSvg)
    implementation(libs.autodispose)
    implementation(libs.autodispose.androidarch)
    implementation(libs.bigImageViewer)
    implementation(libs.conscrypt)
    implementation(libs.filemoji.compat)
    implementation(libs.filemoji.compat.defaults)
    implementation(libs.filemoji.compat.ui)
    implementation(libs.flexbox)
    implementation(libs.fragmentviewbindingdelegateKt)
    implementation(libs.imageCropper)
    implementation(libs.markdownEdit)
    implementation(libs.material)
    implementation(libs.material.drawer)
    implementation(libs.material.drawer.iconics)
    implementation(libs.material.drawer.typeface)
    implementation(libs.sparkbutton)
    implementation(libs.timber)

    // Testing dependencies
    testImplementation(libs.testing.androidx.junit)
    testImplementation(libs.testing.junit)
    testImplementation(libs.testing.mockito.inline)
    testImplementation(libs.testing.mockito.kotlin)
    testImplementation(libs.testing.robolectric)

    androidTestImplementation(libs.testing.androidx.espresso)
    androidTestImplementation(libs.testing.androidx.junit)
    androidTestImplementation(libs.testing.androidx.room)
}
